<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.3.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd ">




	<!-- 数据源，使用dbcp -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="root" />

		<!-- 配置连接池 -->
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="3" />
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="10" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="10" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间,毫秒 -->
		<property name="maxWait" value="5000" />

	</bean>

	<!-- 创建sqlSessinFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis/MyBatisConfig.xml" />
	</bean>



	<!-- 事务管理器 对mybatis操作数据库事务控制，spring使用jdbc的事务控制类 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

   
	<!-- 通知  -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="Save*" propagation="REQUIRED" />
			<tx:method name="Delete*" propagation="REQUIRED" />
			<tx:method name="Insert*" propagation="REQUIRED" />
			<tx:method name="Update*" propagation="REQUIRED" />			
			
			<tx:method name="Find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="Query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="Get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="Select*" propagation="SUPPORTS" read-only="true" />
			
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- aop（切面编程）配置 
	pointcut属性设置示例：
		任意公共方法的执行：
		execution(public * *(..))
		任何一个以“set”开始的方法的执行：
		execution(* set*(..))
		AccountService 接口的任意方法的执行：
		execution(* com.xyz.service.AccountService.*(..))
		定义在service包里的任意方法的执行：
		execution(* com.xyz.service.*.*(..))
		定义在service包和所有子包里的任意类的任意方法的执行：
		execution(* com.xyz.service..*.*(..))
		定义在pointcutexp包和所有子包里的JoinPointObjP2类的任意方法的执行：
		execution(* com.test.spring.aop.pointcutexp..JoinPointObjP2.*(..))")	
	-->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.ssm.demo.service.*.*(..))" />
	</aop:config>
	
	

	<!-- mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册 遵循规范：将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录 
		中 自动扫描出来的mapper的bean的id为mapper类名（首字母小写） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定扫描的包名，如有多个包，每个包中间使用逗号分隔 -->
		<property name="basePackage" value="com.ssm.demo.mapper" />

		<property name="sqlSessionFactory" ref="sqlSessionFactory" />

		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> -->
	</bean>

</beans>